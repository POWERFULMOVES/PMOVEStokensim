"use client";

import { useState } from 'react';
import { SimulationForm } from '@/components/SimulationForm';
import { SimulationResults } from '@/components/SimulationResults';
import { Dashboard } from '@/components/Dashboard';
import { ScenarioResults } from '@/components/ScenarioResults';
import { ShockResults } from '@/components/ShockResults';
import { PresetSelector } from '@/components/PresetSelector';
import { ComparisonResults } from '@/components/ComparisonResults';
import type { SimulationResults as SimResults, SimulationParams } from '@/lib/simulation/types';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Toaster } from '@/components/ui/sonner';
import { toast } from 'sonner';

type ScenarioResultsData = {
  scenario_results: {
    scenario_name: string;
    outcome: string;
    metrics: {
      final_wealth: number | string;
      gini: number | string;
      poverty_rate: number | string;
    };
  };
  comparative_analysis?: string;
  recommendations?: string[];
};

type ShockResultsData = {
  shock_results: {
    shock_type: string;
    magnitude: number;
    impact: {
      wealth_reduction: number;
      recovery_time: number;
    };
  };
  recovery_metrics: {
    recovery_rate: number;
    resilience_score: number;
  };
  recommendations?: string[];
};

type ScenarioData = {
  name: string;
  params?: Partial<SimulationParams>;
};

type ShockParams = {
  type: string;
  magnitude: number;
  duration: number;
};

export default function Home() {
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('presets');
  const [simulationResults, setSimulationResults] = useState<SimResults | null>(null);
  const [scenarioResults, setScenarioResults] = useState<ScenarioResultsData | null>(null);
  const [shockResults, setShockResults] = useState<ShockResultsData | null>(null);

  async function runSimulation(params: SimulationParams) {
    setIsLoading(true);
    try {
      const response = await fetch('/api/simulation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(params),
      });

      if (!response.ok) {
        throw new Error('Failed to run simulation');
      }

      const data = await response.json();
      setSimulationResults(data);
      setActiveTab('analysis');
      toast.success('Simulation completed successfully!');
    } catch (error) {
      console.error('Error running simulation:', error);
      toast.error('Failed to run simulation. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }

  async function runScenario(scenarioData: ScenarioData) {
    setIsLoading(true);
    try {
      const response = await fetch('/api/run-scenario', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(scenarioData),
      });

      if (!response.ok) {
        throw new Error('Failed to run scenario');
      }

      const data = await response.json();
      setScenarioResults(data);
      setActiveTab('analysis');
      toast.success('Scenario analysis completed!');
    } catch (error) {
      console.error('Error running scenario:', error);
      toast.error('Failed to run scenario. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }

  async function testShock(shockParams: ShockParams) {
    setIsLoading(true);
    try {
      const response = await fetch('/api/test-shock', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(shockParams),
      });

      if (!response.ok) {
        throw new Error('Failed to test shock');
      }

      const data = await response.json();
      setShockResults(data);
      setActiveTab('analysis');
      toast.success('Shock test completed!');
    } catch (error) {
      console.error('Error testing shock:', error);
      toast.error('Failed to test shock. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="container mx-auto py-8">
      <header className="mb-8 text-center">
        <h1 className="text-3xl font-bold mb-2">PMOVES Economic Simulator</h1>
        <p className="text-muted-foreground">
          Compare traditional economic systems with cooperative community-based models
        </p>
      </header>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="presets">Presets</TabsTrigger>
          <TabsTrigger value="setup">Custom Setup</TabsTrigger>
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="analysis">Analysis</TabsTrigger>
        </TabsList>

        <TabsContent value="presets" className="space-y-4">
          <div className="grid grid-cols-1 gap-6">
            <div className="prose max-w-none">
              <h2>Economic Model Comparison</h2>
              <p className="lead">
                Compare traditional economic models with cooperative community-based approaches to see which performs better under different conditions.
              </p>
              <p>
                This simulator allows you to test how different economic structures affect wealth distribution, inequality, and community resilience. 
                Choose a preset scenario below or customize your own parameters in the "Custom Setup" tab.
              </p>
            </div>
            <PresetSelector onSelectPreset={runScenario} />
          </div>
        </TabsContent>

        <TabsContent value="setup" className="space-y-4">
          <SimulationForm onSubmit={runSimulation} isLoading={isLoading} />
        </TabsContent>

        <TabsContent value="dashboard" className="space-y-4">
          <Dashboard onRunScenario={runScenario} onTestShock={testShock} />
        </TabsContent>

        <TabsContent value="analysis" className="space-y-4">
          {simulationResults ? (
            <div className="grid grid-cols-1 gap-6">
              <ComparisonResults results={simulationResults} />
              <SimulationResults results={simulationResults} />
            </div>
          ) : scenarioResults ? (
            <ScenarioResults results={scenarioResults} />
          ) : shockResults ? (
            <ShockResults results={shockResults} />
          ) : (
            <div className="flex flex-col items-center justify-center h-64 p-12 text-center border rounded-lg border-dashed">
              <h3 className="text-lg font-medium mb-2">No analysis results</h3>
              <p className="text-muted-foreground mb-4">
                Run a simulation or test a scenario to see results here.
              </p>
            </div>
          )}
        </TabsContent>
      </Tabs>

      <Toaster />
    </div>
  );
}
